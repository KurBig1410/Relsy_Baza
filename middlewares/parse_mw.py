from aiogram import BaseMiddleware
from datetime import datetime, time as dtime
import asyncio
from data.yc_service import fetch_and_store_yclients_data  # —Ç–≤–æ—è –æ—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è

class YclientsMiddleware(BaseMiddleware):
    def __init__(self):
        super().__init__()
        asyncio.create_task(self.run_yc_updater())
        print("üöÄ YclientsMiddleware –∑–∞–ø—É—â–µ–Ω")

    async def __call__(self, handler, event, data):
        return await handler(event, data)

    async def run_yc_updater(self):
        """–ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ YClients 2 —Ä–∞–∑–∞ –≤ –¥–µ–Ω—å."""
        while True:
            now = datetime.now().time()
            # –û–±–Ω–æ–≤–ª—è—Ç—å —Ç–æ–ª—å–∫–æ —É—Ç—Ä–æ–º –∏ –≤–µ—á–µ—Ä–æ–º
            if dtime(9, 0) <= now <= dtime(10, 0) or dtime(19, 0) <= now <= dtime(20, 0):
                try:
                    print("üìä –ó–∞–ø—É—Å–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Å YClients")
                    await fetch_and_store_yclients_data()
                    print("‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")
                except Exception as e:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
                await asyncio.sleep(3600)  # –ñ–¥—ë–º 1 —á–∞—Å, —á—Ç–æ–±—ã –Ω–µ –ø–æ–≤—Ç–æ—Ä–∏–ª–æ—Å—å –≤ —Ç–æ–º –∂–µ –æ–∫–Ω–µ
            else:
                await asyncio.sleep(300)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç