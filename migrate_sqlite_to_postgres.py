import os
import logging
from sqlmodel import SQLModel, Session, create_engine, select
from database.filial import Filial  # –º–æ–¥–µ–ª—å, —Å–≤—è–∑–∞–Ω–Ω–∞—è —Å PostgreSQL
from dotenv import load_dotenv

load_dotenv()
# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    filename="migration.log",
    filemode="w",
    format="%(asctime)s - %(levelname)s - %(message)s",
    level=logging.INFO,
)

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ SQLite
sqlite_engine = create_engine("sqlite:///data/filial_stats.db")
db_url = os.getenv("DB_URL_NO_ASYNC")
# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL
postgres_engine = create_engine(db_url)

def migrate_sqlite_to_postgres():
    logging.info("üöÄ –°—Ç–∞—Ä—Ç –º–∏–≥—Ä–∞—Ü–∏–∏ –∏–∑ SQLite –≤ PostgreSQL")
    # –ß—Ç–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ SQLite
    with Session(sqlite_engine) as sqlite_session:
        result = sqlite_session.exec(select(Filial))
        sqlite_filials = result.all()

    logging.info(f"üì¶ –ù–∞–π–¥–µ–Ω–æ {len(sqlite_filials)} –∑–∞–ø–∏—Å–µ–π –≤ SQLite")

    count = 0

    # –ó–∞–ø–∏—Å—å –≤ PostgreSQL
    with Session(postgres_engine) as session:
        for record in sqlite_filials:
            try:
                new_record = Filial(**record.model_dump())
                session.add(new_record)
                count += 1
                logging.info(
                    f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω: {new_record.report_date.date()} | {new_record.name} | "
                    f"–¥–æ—Ö–æ–¥: {new_record.income or 0}"
                )
            except Exception as e:
                logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–∏: {record.name} | {e}")

        session.commit()
        logging.info(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ {count} –∑–∞–ø–∏—Å–µ–π –≤ PostgreSQL")
    logging.info("üèÅ –ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞")

migrate_sqlite_to_postgres()