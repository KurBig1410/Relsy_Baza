from aiogram import F, Router
from aiogram.types import Message
from aiogram.filters import Command
from aiogram.types import CallbackQuery

from sqlalchemy.ext.asyncio import AsyncSession
from yandex_disk import scan_and_notify
from database.engine import drop_db

from filters.admin_filters import IsAdmin

from keyboards.admin_kb import admin_kb
from keyboards.users_kb import start_kb
from keyboards.inline import get_callback_btns

from FSM_states.admin_FSM import router_admin_FSM

from database.orm_query import (
    orm_get_admins,
    orm_delete_admins,
    orm_delete_file_and_folders,
    orm_get_users,
    orm_delete_users,
    orm_delete_admins_by_id,
    orm_get_question,
    orm_delete_faqs_by_id

)

import asyncio


router_admin_handler = Router()
router_admin_handler.message.filter(IsAdmin())  # –§–∏–ª—å—Ç—Ä –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –∞–¥–º–∏–Ω–∞ –≤ –±–∞–∑–µ
router_admin_handler.include_router(router_admin_FSM)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start. (–í—Ö–æ–¥–∏—Ç –≤ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å, –µ—Å–ª–∏ –∞–¥–º–∏–Ω)
@router_admin_handler.message(Command("start"))
@router_admin_handler.message(Command("admin"))
async def cmd_start_admin(message: Message):
    welcome_text = "–í—ã –≤–æ—à–ª–∏ –∫–∞–∫ –ê–¥–º–∏–Ω.\n–í—ã–±–µ—Ä–∏ —á—Ç–æ –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç:"
    await message.answer(welcome_text, reply_markup=admin_kb)


@router_admin_handler.callback_query(F.data.startswith("delete-admin"))
async def delete_admin(callback: CallbackQuery, session: AsyncSession):
    admin_id = callback.data.split("_")[-1]
    await orm_delete_admins_by_id(session=session, rem_id=admin_id)
    await callback.message.delete()
    await callback.message.answer("–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —É–¥–∞–ª–µ–Ω!")


@router_admin_handler.callback_query(F.data.startswith("delete-faqs"))
async def delete_faq(callback: CallbackQuery, session: AsyncSession):
    faq_id = callback.data.split("_")[-1]
    await orm_delete_faqs_by_id(session=session, faq_id=faq_id)
    await callback.message.delete()
    await callback.message.answer("–í–æ–ø—Ä–æ—Å —É–¥–∞–ª–µ–Ω!")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /user (–í—ã—Ö–æ–¥–∏—Ç –∏–∑ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏)
@router_admin_handler.message(Command("user"))
async def cmd_start_user(message: Message):
    welcome_text = "–í—ã –≤—ã—à–ª–∏ –∏–∑ –ø–∞–Ω–µ–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.\n–í—ã–±–µ—Ä–∏ —á—Ç–æ –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç:"
    await message.answer(welcome_text, reply_markup=start_kb)


# –í—ã–≤–æ–¥–∏—Ç —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤
@router_admin_handler.message(F.text == "–°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤")
async def get_admins(message: Message, session: AsyncSession):
    for admin in await orm_get_admins(session=session):
        await message.answer(
            text=f"{admin.name}",
            reply_markup=get_callback_btns(
                btns={
                    "–£–¥–∞–ª–∏—Ç—å": f"delete-admin_{message.message_id}_{admin.id}",
                    "–ò–∑–º–µ–Ω–∏—Ç—å": f"change-admin_{admin.id}_{admin.id}",
                }
            ),
        )


@router_admin_handler.message(F.text == "–û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É")
async def run_yc_data(message: Message, session: AsyncSession):
    try:
        command = ["xvfb-run", "-a", "python3", "run.py"]
        process = await asyncio.create_subprocess_exec(
            *command,
            stdout=asyncio.subprocess.PIPE,
            stderr=asyncio.subprocess.PIPE
        )
        stdout, stderr = await process.communicate()

        stdout_decoded = stdout.decode().strip()
        stderr_decoded = stderr.decode().strip()

        if process.returncode == 0:
            await message.answer(f'‚úÖ –£—Å–ø–µ—à–Ω–æ:\n{stdout_decoded or "(–Ω–µ—Ç –≤—ã–≤–æ–¥–∞)"}')
        else:
            await message.answer(f'‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è run.py:\n{stderr_decoded or stdout_decoded}')
            print(f"[stderr]:\n{stderr_decoded}")
            print(f"[stdout]:\n{stdout_decoded}")

    except Exception as e:
        await message.answer(f'üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:\n{e}')
        print(f"[exception]: {e}")





@router_admin_handler.message(F.text == "–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
async def get_user(message: Message, session: AsyncSession):
    for user in await orm_get_users(session=session):
        await message.answer(
            text=f"–ò–º—è: {user.name}",
            reply_markup=get_callback_btns(
                btns={
                    "–£–¥–∞–ª–∏—Ç—å": f"delete-user_{user.id}",
                    "–ò–∑–º–µ–Ω–∏—Ç—å": f"change-user_{user.id}",
                }
            ),
        )


@router_admin_handler.message(F.text == "–°–ø–∏—Å–æ–∫ –≤–æ–ø—Ä–æ—Å–æ–≤")
async def get_FAQ(message: Message, session: AsyncSession):
    for faq in await orm_get_question(session=session):
        await message.answer(
            text=f"–í–æ–ø—Ä–æ—Å: {faq.question}\n\n–û—Ç–≤–µ—Ç: {faq.answer}",
            reply_markup=get_callback_btns(
                btns={
                    "–£–¥–∞–ª–∏—Ç—å": f"delete-faqs_{faq.id}",
                    "–ò–∑–º–µ–Ω–∏—Ç—å": f"change-faqs_{faq.id}",
                }
            ),
        )


# –£–¥–∞–ª–µ–Ω–∏–µ –±–∞–∑—ã —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
@router_admin_handler.message(F.text == "–û—á–∏—Å—Ç–∏—Ç—å –±–∞–∑—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
async def delete_users(message: Message, session: AsyncSession):
    await orm_delete_users(session=session)
    try:
        await message.answer("–ë–∞–∑–∞ —É–¥–∞–ª–µ–Ω–∞")
    except Exception as e:
        await message.answer(f"–û—à–∏–±–∫–∞: {e}", reply_markup=admin_kb)


# –£–¥–∞–ª–µ–Ω–∏–µ –±–∞–∑—ã –∞–¥–º–∏–Ω–æ–≤
@router_admin_handler.message(F.text == "–û—á–∏—Å—Ç–∏—Ç—å –±–∞–∑—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤")
async def delete_admins(message: Message, session: AsyncSession):
    await orm_delete_admins(session=session)
    try:
        await message.answer("–ë–∞–∑–∞ —É–¥–∞–ª–µ–Ω–∞")
    except Exception as e:
        await message.answer(f"–û—à–∏–±–∫–∞: {e}", reply_markup=admin_kb)


@router_admin_handler.message(F.text == "–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –Ø–Ω–¥–µ–∫—Å–î–∏—Å–∫–∞")
async def search_files(message: Message, session: AsyncSession):
    await message.answer("–û–∫–µ–π, –ø—Ä–æ–∏–∑–≤–æ–∂—É —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –Ø–Ω–¥–µ–∫—Å–î–∏—Å–∫–∞")
    try:
        await scan_and_notify(session=session)
        await message.answer("–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")
    except Exception as e:
        await message.answer(f"–û—à–∏–±–∫–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")


@router_admin_handler.message(F.text == "–°–±—Ä–æ—Å–∏—Ç—å –±–∞–∑—É")
async def drop_database(message: Message, session: AsyncSession):
    await message.answer("–û–∫–µ–π, —Å–±—Ä–∞—Å—ã–≤–∞—é –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö")
    try:
        await orm_delete_file_and_folders(session=session)
        # await drop_db()
        await message.answer("–ë–∞–∑–∞ —Å–±—Ä–æ—à–µ–Ω–∞")
    except Exception as e:
        await message.answer(f"–û—à–∏–±–∫–∞ —Å–±—Ä–æ—Å–∞: {e}")
