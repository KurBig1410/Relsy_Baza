from aiogram.fsm.state import StatesGroup, State # noqa: F401
from aiogram import F, Router
from aiogram.fsm.context import FSMContext  # noqa: F401
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup, Message, CallbackQuery, WebAppInfo # noqa: F401
from FSM_states.user_FSM import router_user_FSM
from aiogram.filters import Command
from keyboards.users_kb import start_kb
from filters.admin_filters import IsUser # noqa: F401
from keyboards.inline import get_callback_btns
from database.orm_query import orm_get_question
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy import select
from database.models import FAQ


router_user_handler = Router()
router_user_handler.include_router(router_user_FSM)
user_answers = {}  # user_id: message_id

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
# –°—Ä–∞–±–æ—Ç–∞–µ—Ç, –µ—Å–ª–∏ –æ–±—ã—á–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
@router_user_handler.message(Command("start"))
async def cmd_start(message: Message):
    welcome_text = "–í—ã–±–µ—Ä–∏ —á—Ç–æ –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç:"
    await message.answer(welcome_text, reply_markup=start_kb)

@router_user_handler.message(F.text == "–†–µ–π—Ç–∏–Ω–≥ —Å–µ—Ç–∏ —Å—Ç—É–¥–∏–π")
# async def cmd_static(message: Message):
#     welcome_text = "https://kurbig1410.github.io/filial-stats-vue/"
#     await message.answer(welcome_text)


async def send_stats(message: Message):
    kb = InlineKeyboardMarkup(
        row_width=1,
        inline_keyboard=[
            [
                InlineKeyboardButton(
                    text="üìä –û—Ç–∫—Ä—ã—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É", 
                    web_app=WebAppInfo(url="https://kurbig1410.github.io/filial-stats-vue/")
                )
            ]
        ],
    )
    await message.answer(
        "–ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É:", reply_markup=kb
    )



@router_user_handler.message(F.text == "–ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã")
async def show_faq(message: Message, session: AsyncSession):
    faq_list = await orm_get_question(session=session)
    for faq in faq_list:
        await message.answer(
            text=f"‚ùì {faq.question}",
            reply_markup=get_callback_btns(
                btns={
                    "–û—Ç–≤–µ—Ç": f"answer_{faq.id}"  # –õ—É—á—à–µ –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å ID, –Ω–µ —Å–∞–º –æ—Ç–≤–µ—Ç
                }
            ),
        )





@router_user_handler.callback_query(F.data.startswith("answer"))
async def show_answer(callback: CallbackQuery, session: AsyncSession):
    faq_id = callback.data.split("_")[-1]
    query = select(FAQ).where(FAQ.id == faq_id)
    result = await session.execute(query)
    faq = result.scalar_one_or_none()
    # await callback.message.answer(f'{query}\n\n\n{result}\n\n\n{faq.answer}\n\n\n{faq.question}')
    if not faq:
        await callback.message.answer("–û—Ç–≤–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω üòï")
        return await callback.answer()

    user_id = callback.from_user.id

    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π –æ—Ç–≤–µ—Ç, –µ—Å–ª–∏ –æ–Ω –±—ã–ª
    if user_id in user_answers:
        try:
            await callback.message.bot.delete_message(chat_id=callback.message.chat.id, message_id=user_answers[user_id])
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –æ—Ç–≤–µ—Ç
    sent = await callback.message.answer(f"üìå –û—Ç–≤–µ—Ç:\n{faq.answer}")

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    user_answers[user_id] = sent.message_id

    await callback.answer()
